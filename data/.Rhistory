IDBextCTYS <- read.table("C:/Users/Umberto/Downloads/IDB_DataSet/IDBextCTYS.txt", quote="\"", comment.char="")
View(IDBextCTYS)
IDBext194 <- read.table("C:/Users/Umberto/Downloads/IDB_DataSet/IDBext194.txt", quote="\"", comment.char="")
View(IDBext194)
View(IDBext194)
IDBext194.semicolon <- read.csv("C:/Users/Umberto/Downloads/IDB_DataSet/IDBext194-semicolon.txt", header=FALSE, sep=";")
View(IDBext194.semicolon)
data<- IDBext194.semicolon
remove(IDBext194.semicolon)
View(data)
row.names(data)
row.names(data)<-"a"
row.names(data)<-[1:100]
row.names(data)<-toString([1:100])
parole<-toString([1:100])
as.character([1:100])
as.character(1:100)
parole<-as.character(1:100)
row.names(data)<-parole
colnames(data)
colnames(data)<-parole
View(data)
IDBext194.semicolon <- read.csv("C:/Users/Umberto/Downloads/IDB_DataSet/IDBext194-semicolon.txt", header=FALSE, sep=";")
View(IDBext194.semicolon)
data<- IDBext194.semicolon;
remove(IDBext194.semicolon)
View(data)
data[0]
data[0,]
ages<-as.character([1:100])
ages<-as.character(1:100)
rbind(nomiRighe,ages)
nomiRighe<- ["area","year","sex","maxAge"]
nomiRighe<- c("area","year","sex","maxAge")
ages<-as.character(1:100)
rbind(nomiRighe,ages)
nomiRighe
cbind(nomiRighe,ages)
c(nomiRighe,ages)
rowNames<-c(nomiRighe,ages)
bitMap <- read.csv("C:/Users/Umberto/Desktop/dataTrainingDiabet/trainingSet/bitMap.csv")
View(bitMap)
nrow(bitMap)
ncol(bitMap)
PS00061 <- read.csv("C:/Users/Umberto/Desktop/projectNN/data/plus/PS00061.csv", stringsAsFactors=FALSE)
View(PS00061)
View(PS00061)
PS50007 <- read.csv("C:/Users/Umberto/Desktop/projectNN/data/plus/PS50007.csv", stringsAsFactors=FALSE)
PS50893 <- read.csv("C:/Users/Umberto/Desktop/projectNN/data/plus/PS50893.csv", stringsAsFactors=FALSE)
PS51092 <- read.csv("C:/Users/Umberto/Desktop/projectNN/data/plus/PS51092.csv", stringsAsFactors=FALSE)
PS51722 <- read.csv("C:/Users/Umberto/Desktop/projectNN/data/plus/PS51722.csv", stringsAsFactors=FALSE)
datasets<-c('PS00061','PS50007','PS50893','PS51092','PS51722')
err = 0
for(d in 1: length(datasets)){
table<-get(datasets[d])
for(i in 1: nrow(table)){
while(length(nchar(table[i,'Sequence'])==0)){
tryCatch({
protein<-paste(table$Entry[i],'.fasta',sep='')
apiK <- apiKeys[(i%%5) + 1]         #mod gives number between 0-4, then plus 1 so i get between 1-5
baseLink<-'https://www.kimonolabs.com/api/ondemand/bi56x3dg?apikey='
VarProteinName<-'&kimpath2='
link<-paste(baseLink,apiK, VarProteinName, protein, sep = "")
json <- getURL(link)
obj <- fromJSON(json)
#print(obj)
str<-obj$results$collection1[[1]]$stringa
tokens<-strsplit(str,"\n")
tokens[[1]][1]<-''
sequence<-paste(tokens[[1]], collapse='')
table$Sequence[i]<-sequence
}, warning = function(w) {
#i = i-1
#'warn'
}, error = function(e) {
#if there is an error just retry
i=i-1
err = err+1
}, finally = {
#i=i-1
#'final'
})
}
}
assign(datasets[d],table)
#write.table(table, file = paste("./plus/",datasets[d],".csv",sep=''),sep=",",row.names=FALSE)
'done'
}
length(nchar(table[i,'Sequence'])==0
)
View(table)
table[i,'Sequence'])
table[i,'Sequence']
nchar(table[i,'Sequence'])
nchar(table[i,'Sequence'])==0
View(PS00061)
length(nchar(table[i,'Sequence'])==0)
which(length(nchar(table[i,'Sequence'])==0))
which(nchar(table[i,'Sequence'])==0)
(nchar(table[i,'Sequence'])==0)
err = 0
for(d in 1: length(datasets)){
table<-get(datasets[d])
for(i in 1: nrow(table)){
while(nchar(table[i,'Sequence'])==0){
tryCatch({
protein<-paste(table$Entry[i],'.fasta',sep='')
apiK <- apiKeys[(i%%5) + 1]         #mod gives number between 0-4, then plus 1 so i get between 1-5
baseLink<-'https://www.kimonolabs.com/api/ondemand/bi56x3dg?apikey='
VarProteinName<-'&kimpath2='
link<-paste(baseLink,apiK, VarProteinName, protein, sep = "")
json <- getURL(link)
obj <- fromJSON(json)
#print(obj)
str<-obj$results$collection1[[1]]$stringa
tokens<-strsplit(str,"\n")
tokens[[1]][1]<-''
sequence<-paste(tokens[[1]], collapse='')
table$Sequence[i]<-sequence
}, warning = function(w) {
#i = i-1
#'warn'
}, error = function(e) {
#if there is an error just retry
i=i-1
err = err+1
}, finally = {
#i=i-1
#'final'
})
}
}
assign(datasets[d],table)
#write.table(table, file = paste("./plus/",datasets[d],".csv",sep=''),sep=",",row.names=FALSE)
}
print(i)
for(d in 1: length(datasets)){
table<-get(datasets[d])
for(i in 1: nrow(table)){
while(nchar(table[i,'Sequence'])==0){
print(i)
tryCatch({
protein<-paste(table$Entry[i],'.fasta',sep='')
apiK <- apiKeys[(i%%5) + 1]         #mod gives number between 0-4, then plus 1 so i get between 1-5
baseLink<-'https://www.kimonolabs.com/api/ondemand/bi56x3dg?apikey='
VarProteinName<-'&kimpath2='
link<-paste(baseLink,apiK, VarProteinName, protein, sep = "")
json <- getURL(link)
obj <- fromJSON(json)
#print(obj)
str<-obj$results$collection1[[1]]$stringa
tokens<-strsplit(str,"\n")
tokens[[1]][1]<-''
sequence<-paste(tokens[[1]], collapse='')
table$Sequence[i]<-sequence
}, warning = function(w) {
#i = i-1
#'warn'
}, error = function(e) {
#if there is an error just retry
i=i-1
err = err+1
}, finally = {
#i=i-1
#'final'
})
}
}
assign(datasets[d],table)
#write.table(table, file = paste("./plus/",datasets[d],".csv",sep=''),sep=",",row.names=FALSE)
}
View(table)
link
print(i)
tryCatch({
protein<-paste(table$Entry[i],'.fasta',sep='')
apiK <- apiKeys[(i%%5) + 1]         #mod gives number between 0-4, then plus 1 so i get between 1-5
baseLink<-'https://www.kimonolabs.com/api/ondemand/bi56x3dg?apikey='
VarProteinName<-'&kimpath2='
link<-paste(baseLink,apiK, VarProteinName, protein, sep = "")
json <- getURL(link)
obj <- fromJSON(json)
#print(obj)
str<-obj$results$collection1[[1]]$stringa
tokens<-strsplit(str,"\n")
tokens[[1]][1]<-''
sequence<-paste(tokens[[1]], collapse='')
table$Sequence[i]<-sequence
}, warning = function(w) {
#i = i-1
#'warn'
}, error = function(e) {
#if there is an error just retry
i=i-1
err = err+1
}, finally = {
#i=i-1
#'final'
})
protein<-paste(table$Entry[i],'.fasta',sep='')
apiK <- apiKeys[(i%%5) + 1]         #mod gives number between 0-4, then plus 1 so i get between 1-5
apiKeys<-c('lj2wDSnKFryhnv5MDQBaizLRGoD4b3mW',
'UAihH6xCMyX9SZnUsMMG9y3hw40hvdwI',
'aMloVVFACa6T7e1sNnhZN1au9mOAolGp',
'D2jJNdkHPa4aiXutyNhcXM0Pcdv3AknI',
'tALZxK9D0J2CUGSMpy4CvBbZK6yEyLY6')
for(d in 1: length(datasets)){
table<-get(datasets[d])
for(i in 1: nrow(table)){
while(nchar(table[i,'Sequence'])==0){
print(i)
tryCatch({
protein<-paste(table$Entry[i],'.fasta',sep='')
apiK <- apiKeys[(i%%5) + 1]         #mod gives number between 0-4, then plus 1 so i get between 1-5
baseLink<-'https://www.kimonolabs.com/api/ondemand/bi56x3dg?apikey='
VarProteinName<-'&kimpath2='
link<-paste(baseLink,apiK, VarProteinName, protein, sep = "")
json <- getURL(link)
obj <- fromJSON(json)
#print(obj)
str<-obj$results$collection1[[1]]$stringa
tokens<-strsplit(str,"\n")
tokens[[1]][1]<-''
sequence<-paste(tokens[[1]], collapse='')
table$Sequence[i]<-sequence
}, warning = function(w) {
#i = i-1
#'warn'
}, error = function(e) {
#if there is an error just retry
i=i-1
err = err+1
}, finally = {
#i=i-1
#'final'
})
}
}
assign(datasets[d],table)
#write.table(table, file = paste("./plus/",datasets[d],".csv",sep=''),sep=",",row.names=FALSE)
}
protein<-paste(table$Entry[i],'.fasta',sep='')
apiK <- apiKeys[(i%%5) + 1]         #mod gives number between 0-4, then plus 1 so i get between 1-5
baseLink<-'https://www.kimonolabs.com/api/ondemand/bi56x3dg?apikey='
VarProteinName<-'&kimpath2='
link<-paste(baseLink,apiK, VarProteinName, protein, sep = "")
json <- getURL(link)
library('RCurl')
library('rjson')
#===================check that all the sequences have been collected
err = 0
for(d in 1: length(datasets)){
table<-get(datasets[d])
for(i in 1: nrow(table)){
while(nchar(table[i,'Sequence'])==0){
print(i)
tryCatch({
protein<-paste(table$Entry[i],'.fasta',sep='')
apiK <- apiKeys[(i%%5) + 1]         #mod gives number between 0-4, then plus 1 so i get between 1-5
baseLink<-'https://www.kimonolabs.com/api/ondemand/bi56x3dg?apikey='
VarProteinName<-'&kimpath2='
link<-paste(baseLink,apiK, VarProteinName, protein, sep = "")
json <- getURL(link)
obj <- fromJSON(json)
#print(obj)
str<-obj$results$collection1[[1]]$stringa
tokens<-strsplit(str,"\n")
tokens[[1]][1]<-''
sequence<-paste(tokens[[1]], collapse='')
table$Sequence[i]<-sequence
}, warning = function(w) {
#i = i-1
#'warn'
}, error = function(e) {
#if there is an error just retry
i=i-1
err = err+1
}, finally = {
#i=i-1
#'final'
})
}
}
assign(datasets[d],table)
#write.table(table, file = paste("./plus/",datasets[d],".csv",sep=''),sep=",",row.names=FALSE)
}
protein<-paste(table$Entry[i],'.fasta',sep='')
apiK <- apiKeys[(i%%5) + 1]         #mod gives number between 0-4, then plus 1 so i get between 1-5
baseLink<-'https://www.kimonolabs.com/api/ondemand/bi56x3dg?apikey='
VarProteinName<-'&kimpath2='
link<-paste(baseLink,apiK, VarProteinName, protein, sep = "")
json <- getURL(link)
obj <- fromJSON(json)
#print(obj)
str<-obj$results$collection1[[1]]$stringa
tokens<-strsplit(str,"\n")
tokens[[1]][1]<-''
sequence<-paste(tokens[[1]], collapse='')
json <- getURL(link)
json <- getURL(link)
link
#===================check that all the sequences have been collected
err = 0
for(d in 1: length(datasets)){
table<-get(datasets[d])
for(i in 1: nrow(table)){
k=0 # this is to make the apikey slide if the call for a certain i fails
while(nchar(table[i,'Sequence'])==0){
k=k+1
print(i)
tryCatch({
protein<-paste(table$Entry[i],'.fasta',sep='')
apiK <- apiKeys[((i+k)%%5) + 1]         #mod gives number between 0-4, then plus 1 so i get between 1-5
baseLink<-'https://www.kimonolabs.com/api/ondemand/bi56x3dg?apikey='
VarProteinName<-'&kimpath2='
link<-paste(baseLink,apiK, VarProteinName, protein, sep = "")
json <- getURL(link)
obj <- fromJSON(json)
#print(obj)
str<-obj$results$collection1[[1]]$stringa
tokens<-strsplit(str,"\n")
tokens[[1]][1]<-''
sequence<-paste(tokens[[1]], collapse='')
table$Sequence[i]<-sequence
}, warning = function(w) {
#i = i-1
#'warn'
}, error = function(e) {
#if there is an error just retry
i=i-1
err = err+1
}, finally = {
#i=i-1
#'final'
})
}
}
assign(datasets[d],table)
#write.table(table, file = paste("./plus/",datasets[d],".csv",sep=''),sep=",",row.names=FALSE)
}
which(nchar(PS51722[,'Sequence'])==0)
which(nchar(PS00061[,'Sequence'])==0)
which(nchar(PS50007[,'Sequence'])==0)
which(nchar(PS50893[,'Sequence'])==0)
which(nchar(PS51092
[,'Sequence'])==0)
err = 0
for(d in 1: length(datasets)){
table<-get(datasets[d])
for(i in 1: nrow(table)){
k=0 # this is to make the apikey slide if the call for a certain i fails
while(nchar(table[i,'Sequence'])==0){
k=k+1
print(i)
tryCatch({
protein<-paste(table$Entry[i],'.fasta',sep='')
apiK <- apiKeys[((i+k)%%5) + 1]         #mod gives number between 0-4, then plus 1 so i get between 1-5
baseLink<-'https://www.kimonolabs.com/api/ondemand/bi56x3dg?apikey='
VarProteinName<-'&kimpath2='
link<-paste(baseLink,apiK, VarProteinName, protein, sep = "")
json <- getURL(link)
obj <- fromJSON(json)
#print(obj)
str<-obj$results$collection1[[1]]$stringa
tokens<-strsplit(str,"\n")
tokens[[1]][1]<-''
sequence<-paste(tokens[[1]], collapse='')
table$Sequence[i]<-sequence
}, warning = function(w) {
#i = i-1
#'warn'
}, error = function(e) {
#if there is an error just retry
i=i-1
err = err+1
}, finally = {
#i=i-1
#'final'
})
}
}
assign(datasets[d],table)
write.table(table, file = paste("./plus/",datasets[d],".csv",sep=''),sep=",",row.names=FALSE)
}
setwd("C:/Users/Umberto/Desktop/projectNN/data")
err = 0
for(d in 1: length(datasets)){
table<-get(datasets[d])
for(i in 1: nrow(table)){
k=0 # this is to make the apikey slide if the call for a certain i fails
while(nchar(table[i,'Sequence'])==0){
k=k+1
print(i)
tryCatch({
protein<-paste(table$Entry[i],'.fasta',sep='')
apiK <- apiKeys[((i+k)%%5) + 1]         #mod gives number between 0-4, then plus 1 so i get between 1-5
baseLink<-'https://www.kimonolabs.com/api/ondemand/bi56x3dg?apikey='
VarProteinName<-'&kimpath2='
link<-paste(baseLink,apiK, VarProteinName, protein, sep = "")
json <- getURL(link)
obj <- fromJSON(json)
#print(obj)
str<-obj$results$collection1[[1]]$stringa
tokens<-strsplit(str,"\n")
tokens[[1]][1]<-''
sequence<-paste(tokens[[1]], collapse='')
table$Sequence[i]<-sequence
}, warning = function(w) {
#i = i-1
#'warn'
}, error = function(e) {
#if there is an error just retry
i=i-1
err = err+1
}, finally = {
#i=i-1
#'final'
})
}
}
assign(datasets[d],table)
write.table(table, file = paste("./plus/",datasets[d],".csv",sep=''),sep=",",row.names=FALSE)
}
PS00061 <- read.csv("C:/Users/Umberto/Desktop/projectNN/data/plus/PS00061.csv", stringsAsFactors=FALSE)
PS50007 <- read.csv("C:/Users/Umberto/Desktop/projectNN/data/plus/PS50007.csv", stringsAsFactors=FALSE)
PS50893 <- read.csv("C:/Users/Umberto/Desktop/projectNN/data/plus/PS50893.csv", stringsAsFactors=FALSE)
PS51092 <- read.csv("C:/Users/Umberto/Desktop/projectNN/data/plus/PS51092.csv", stringsAsFactors=FALSE)
PS51722 <- read.csv("C:/Users/Umberto/Desktop/projectNN/data/plus/PS51722.csv", stringsAsFactors=FALSE)
install.packages('tau')
library(tau)
temp <- "I would gladly pay you Tuesday for a hamburger today."
textcnt(temp, method="ngram", n=3L, decreasing=TRUE)
installed.packages('RWeka')
installed.packages('tm')
install.packages('tm')
install.packages('RWeka')
library("RWeka")
library("tm")
temp <- "abcde"
textcnt(temp, method="ngram", n=3L, decreasing=TRUE)
textcnt(temp, method="ngram", n=3L, decreasing=FALSE)
data("crude")
BigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 2, max = 2))
tdm <- TermDocumentMatrix(crude, control = list(tokenize = BigramTokenizer))
inspect(tdm[340:345,1:10])
tdm[340:345,1:10]
BigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 3, max = 3))
tdm <- TermDocumentMatrix(crude, control = list(tokenize = BigramTokenizer))
inspect(tdm[340:345,1:10])
1 install . packages (" ngram ")
install . packages (" ngram ")
install.packages (" ngram ")
install.packages('ngram')
library('ngram')
x <- "A B A C A B B"
ng <- ngram (x , n =2)
ng
print(ng)
print(ng,full=TRUE)
?seq2ngrams
seq2ngrams
biogram
install.packages('biogram')
library('biogram')
?seq2ngrams
seq2ngrams(c('abcd','efgh'),2,c('a','b','c'))
seq2ngrams(c('abcd','efgh'), 3, 1L:4)
temp <- "A B C A B C"
textcnt(temp, method="ngram", n=3L, decreasing=TRUE)
textcnt(temp, method="ngram", n=2L, decreasing=TRUE)
data("crude")
BigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 2, max = 2))
tdm <- TermDocumentMatrix(crude, control = list(tokenize = BigramTokenizer))
inspect(tdm[340:345,1:10])
x <- "A B A C A B B"
ng <- ngram (x , n =2)
ng
print(ng,full=TRUE)
inspect(tdm[340:445,1:10])
tdm[340:445,1:10]
View(PS00061)
