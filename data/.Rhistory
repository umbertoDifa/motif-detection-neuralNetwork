IDBextCTYS <- read.table("C:/Users/Umberto/Downloads/IDB_DataSet/IDBextCTYS.txt", quote="\"", comment.char="")
View(IDBextCTYS)
IDBext194 <- read.table("C:/Users/Umberto/Downloads/IDB_DataSet/IDBext194.txt", quote="\"", comment.char="")
View(IDBext194)
View(IDBext194)
IDBext194.semicolon <- read.csv("C:/Users/Umberto/Downloads/IDB_DataSet/IDBext194-semicolon.txt", header=FALSE, sep=";")
View(IDBext194.semicolon)
data<- IDBext194.semicolon
remove(IDBext194.semicolon)
View(data)
row.names(data)
row.names(data)<-"a"
row.names(data)<-[1:100]
row.names(data)<-toString([1:100])
parole<-toString([1:100])
as.character([1:100])
as.character(1:100)
parole<-as.character(1:100)
row.names(data)<-parole
colnames(data)
colnames(data)<-parole
View(data)
IDBext194.semicolon <- read.csv("C:/Users/Umberto/Downloads/IDB_DataSet/IDBext194-semicolon.txt", header=FALSE, sep=";")
View(IDBext194.semicolon)
data<- IDBext194.semicolon;
remove(IDBext194.semicolon)
View(data)
data[0]
data[0,]
ages<-as.character([1:100])
ages<-as.character(1:100)
rbind(nomiRighe,ages)
nomiRighe<- ["area","year","sex","maxAge"]
nomiRighe<- c("area","year","sex","maxAge")
ages<-as.character(1:100)
rbind(nomiRighe,ages)
nomiRighe
cbind(nomiRighe,ages)
c(nomiRighe,ages)
rowNames<-c(nomiRighe,ages)
bitMap <- read.csv("C:/Users/Umberto/Desktop/dataTrainingDiabet/trainingSet/bitMap.csv")
View(bitMap)
nrow(bitMap)
ncol(bitMap)
PS01033 <- read.delim("C:/Users/Umberto/Desktop/projectNN/data/PS01033.xls", stringsAsFactors=FALSE)
PS01033<-PS01033[c(-3,-4,-5,-6)]
d=6
table<-get(datasets[d])
#trim dataset to 600 proteins
table<-table[1:min(600,nrow(table)),]
table$Sequence<-''
for(i in 1: nrow(table)){
k=0 # this is to make the apikey slide if the call for a certain i fails
while(nchar(table[i,'Sequence'])==0){
k=k+1
#print(i)
tryCatch({
protein<-paste(table$Entry[i],'.fasta',sep='')
apiK <- apiKeys[((i+k)%%5) + 1]         #mod gives number between 0-4, then plus 1 so i get between 1-5
baseLink<-'https://www.kimonolabs.com/api/ondemand/bi56x3dg?apikey='
VarProteinName<-'&kimpath2='
link<-paste(baseLink,apiK, VarProteinName, protein, sep = "")
json <- getURL(link)
obj <- fromJSON(json)
#print(obj)
str<-obj$results$collection1[[1]]$stringa
tokens<-strsplit(str,"\n")
tokens[[1]][1]<-''
sequence<-paste(tokens[[1]], collapse='')
table$Sequence[i]<-sequence
}, warning = function(w) {
#i = i-1
#'warn'
}, error = function(e) {
#if there is an error just retry
i=i-1
err = err+1
}, finally = {
#i=i-1
#'final'
})
}
}
table<-get(datasets[d])
PS00061
table<-get(datasets[d])
datasets<-c('PS00061','PS50007','PS50893','PS51092','PS51722','PS01033')
table<-get(datasets[d])
#trim dataset to 600 proteins
table<-table[1:min(600,nrow(table)),]
table$Sequence<-''
for(i in 1: nrow(table)){
k=0 # this is to make the apikey slide if the call for a certain i fails
while(nchar(table[i,'Sequence'])==0){
k=k+1
#print(i)
tryCatch({
protein<-paste(table$Entry[i],'.fasta',sep='')
apiK <- apiKeys[((i+k)%%5) + 1]         #mod gives number between 0-4, then plus 1 so i get between 1-5
baseLink<-'https://www.kimonolabs.com/api/ondemand/bi56x3dg?apikey='
VarProteinName<-'&kimpath2='
link<-paste(baseLink,apiK, VarProteinName, protein, sep = "")
json <- getURL(link)
obj <- fromJSON(json)
#print(obj)
str<-obj$results$collection1[[1]]$stringa
tokens<-strsplit(str,"\n")
tokens[[1]][1]<-''
sequence<-paste(tokens[[1]], collapse='')
table$Sequence[i]<-sequence
}, warning = function(w) {
#i = i-1
#'warn'
}, error = function(e) {
#if there is an error just retry
i=i-1
err = err+1
}, finally = {
#i=i-1
#'final'
})
}
}
err = 0
#trim dataset to 600 proteins
table<-table[1:min(600,nrow(table)),]
table$Sequence<-''
for(i in 1: nrow(table)){
k=0 # this is to make the apikey slide if the call for a certain i fails
while(nchar(table[i,'Sequence'])==0){
k=k+1
#print(i)
tryCatch({
protein<-paste(table$Entry[i],'.fasta',sep='')
apiK <- apiKeys[((i+k)%%5) + 1]         #mod gives number between 0-4, then plus 1 so i get between 1-5
baseLink<-'https://www.kimonolabs.com/api/ondemand/bi56x3dg?apikey='
VarProteinName<-'&kimpath2='
link<-paste(baseLink,apiK, VarProteinName, protein, sep = "")
json <- getURL(link)
obj <- fromJSON(json)
#print(obj)
str<-obj$results$collection1[[1]]$stringa
tokens<-strsplit(str,"\n")
tokens[[1]][1]<-''
sequence<-paste(tokens[[1]], collapse='')
table$Sequence[i]<-sequence
}, warning = function(w) {
#i = i-1
#'warn'
}, error = function(e) {
#if there is an error just retry
i=i-1
err = err+1
}, finally = {
#i=i-1
#'final'
})
}
}
table<-get(datasets[d])
#trim dataset to 600 proteins
table<-table[1:min(600,nrow(table)),]
table$Sequence<-''
for(i in 1: nrow(table)){
k=0 # this is to make the apikey slide if the call for a certain i fails
while(nchar(table[i,'Sequence'])==0){
k=k+1
print(i)
tryCatch({
protein<-paste(table$Entry[i],'.fasta',sep='')
apiK <- apiKeys[((i+k)%%5) + 1]         #mod gives number between 0-4, then plus 1 so i get between 1-5
baseLink<-'https://www.kimonolabs.com/api/ondemand/bi56x3dg?apikey='
VarProteinName<-'&kimpath2='
link<-paste(baseLink,apiK, VarProteinName, protein, sep = "")
json <- getURL(link)
obj <- fromJSON(json)
#print(obj)
str<-obj$results$collection1[[1]]$stringa
tokens<-strsplit(str,"\n")
tokens[[1]][1]<-''
sequence<-paste(tokens[[1]], collapse='')
table$Sequence[i]<-sequence
}, warning = function(w) {
#i = i-1
#'warn'
}, error = function(e) {
#if there is an error just retry
i=i-1
err = err+1
}, finally = {
#i=i-1
#'final'
})
}
}
link
apiKeys<-c('lj2wDSnKFryhnv5MDQBaizLRGoD4b3mW',
'UAihH6xCMyX9SZnUsMMG9y3hw40hvdwI',
'aMloVVFACa6T7e1sNnhZN1au9mOAolGp',
'D2jJNdkHPa4aiXutyNhcXM0Pcdv3AknI',
'tALZxK9D0J2CUGSMpy4CvBbZK6yEyLY6')
table<-get(datasets[d])
#trim dataset to 600 proteins
table<-table[1:min(600,nrow(table)),]
table$Sequence<-''
for(i in 1: nrow(table)){
k=0 # this is to make the apikey slide if the call for a certain i fails
while(nchar(table[i,'Sequence'])==0){
k=k+1
print(i)
tryCatch({
protein<-paste(table$Entry[i],'.fasta',sep='')
apiK <- apiKeys[((i+k)%%5) + 1]         #mod gives number between 0-4, then plus 1 so i get between 1-5
baseLink<-'https://www.kimonolabs.com/api/ondemand/bi56x3dg?apikey='
VarProteinName<-'&kimpath2='
link<-paste(baseLink,apiK, VarProteinName, protein, sep = "")
json <- getURL(link)
obj <- fromJSON(json)
#print(obj)
str<-obj$results$collection1[[1]]$stringa
tokens<-strsplit(str,"\n")
tokens[[1]][1]<-''
sequence<-paste(tokens[[1]], collapse='')
table$Sequence[i]<-sequence
}, warning = function(w) {
#i = i-1
#'warn'
}, error = function(e) {
#if there is an error just retry
i=i-1
err = err+1
}, finally = {
#i=i-1
#'final'
})
}
}
link
View(table)
table<-get(datasets[d])
#trim dataset to 600 proteins
table<-table[1:min(600,nrow(table)),]
table$Sequence<-''
for(i in 1: nrow(table)){
k=0 # this is to make the apikey slide if the call for a certain i fails
while(nchar(table[i,'Sequence'])==0){
k=k+1
print(i)
tryCatch({
protein<-paste(table$Entry[i],'.fasta',sep='')
apiK <- apiKeys[((i+k)%%5) + 1]         #mod gives number between 0-4, then plus 1 so i get between 1-5
baseLink<-'https://www.kimonolabs.com/api/ondemand/bi56x3dg?apikey='
VarProteinName<-'&kimpath2='
link<-paste(baseLink,apiK, VarProteinName, protein, sep = "")
json <- getURL(link)
obj <- fromJSON(json)
#print(obj)
str<-obj$results$collection1[[1]]$stringa
tokens<-strsplit(str,"\n")
tokens[[1]][1]<-''
sequence<-paste(tokens[[1]], collapse='')
table$Sequence[i]<-sequence
print(sequence)
}, warning = function(w) {
#i = i-1
#'warn'
}, error = function(e) {
#if there is an error just retry
i=i-1
err = err+1
}, finally = {
#i=i-1
#'final'
})
}
}
i = 1
table<-get(datasets[d])
#trim dataset to 600 proteins
table<-table[1:min(600,nrow(table)),]
table$Sequence<-''
k=0 # this is to make the apikey slide if the call for a certain i fails
nchar(table[i,'Sequence'])==0
k=k+1
print(i)
protein<-paste(table$Entry[i],'.fasta',sep='')
apiK <- apiKeys[((i+k)%%5) + 1]         #mod gives number between 0-4, then plus 1 so i get between 1-5
baseLink<-'https://www.kimonolabs.com/api/ondemand/bi56x3dg?apikey='
VarProteinName<-'&kimpath2='
link<-paste(baseLink,apiK, VarProteinName, protein, sep = "")
json <- getURL(link)
library('RCurl')
library('rjson')
table<-get(datasets[d])
#trim dataset to 600 proteins
table<-table[1:min(600,nrow(table)),]
table$Sequence<-''
for(i in 1: nrow(table)){
k=0 # this is to make the apikey slide if the call for a certain i fails
while(nchar(table[i,'Sequence'])==0){
k=k+1
print(i)
tryCatch({
protein<-paste(table$Entry[i],'.fasta',sep='')
apiK <- apiKeys[((i+k)%%5) + 1]         #mod gives number between 0-4, then plus 1 so i get between 1-5
baseLink<-'https://www.kimonolabs.com/api/ondemand/bi56x3dg?apikey='
VarProteinName<-'&kimpath2='
link<-paste(baseLink,apiK, VarProteinName, protein, sep = "")
json <- getURL(link)
obj <- fromJSON(json)
#print(obj)
str<-obj$results$collection1[[1]]$stringa
tokens<-strsplit(str,"\n")
tokens[[1]][1]<-''
sequence<-paste(tokens[[1]], collapse='')
table$Sequence[i]<-sequence
print(sequence)
}, warning = function(w) {
#i = i-1
#'warn'
}, error = function(e) {
#if there is an error just retry
i=i-1
err = err+1
}, finally = {
#i=i-1
#'final'
})
}
}
table<-get(datasets[d])
#trim dataset to 600 proteins
table<-table[1:min(600,nrow(table)),]
table$Sequence<-''
for(i in 1: nrow(table)){
k=0 # this is to make the apikey slide if the call for a certain i fails
while(nchar(table[i,'Sequence'])==0){
k=k+1
print(i)
tryCatch({
protein<-paste(table$Entry[i],'.fasta',sep='')
apiK <- apiKeys[((i+k)%%5) + 1]         #mod gives number between 0-4, then plus 1 so i get between 1-5
baseLink<-'https://www.kimonolabs.com/api/ondemand/bi56x3dg?apikey='
VarProteinName<-'&kimpath2='
link<-paste(baseLink,apiK, VarProteinName, protein, sep = "")
json <- getURL(link)
obj <- fromJSON(json)
#print(obj)
str<-obj$results$collection1[[1]]$stringa
tokens<-strsplit(str,"\n")
tokens[[1]][1]<-''
sequence<-paste(tokens[[1]], collapse='')
table$Sequence[i]<-sequence
#print(sequence)
}, warning = function(w) {
#i = i-1
#'warn'
}, error = function(e) {
#if there is an error just retry
i=i-1
err = err+1
}, finally = {
#i=i-1
#'final'
})
}
}
assign(datasets[d],table)
write.table(table, file = paste("./plus/",datasets[d],".csv",sep=''),sep=",",row.names=FALSE)
setwd("C:/Users/Umberto/Desktop/projectNN/data")
write.table(table, file = paste("./plus/",datasets[d],".csv",sep=''),sep=",",row.names=FALSE)
